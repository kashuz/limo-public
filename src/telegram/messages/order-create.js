import r from 'ramda';
import {format as address} from '../../util/geo';
import {format as date} from '../../util/date';
import {format as cost} from '../../util/cost';
import plural from '../../util/plural';

const rules = [
  ['location',
    'üî∏ –ê–¥—Ä–µ—Å: –Ω–µ —É–∫–∞–∑–∞–Ω',
    value => `üîπ ${address(value)}`],

  ['category_id',
    'üî∏ –ú–∞—à–∏–Ω–∞: –Ω–µ –≤—ã–±—Ä–∞–Ω–∞',
    (_, {category, car}) => `üîπ ${car || '–õ—é–±–∞—è –º–∞—à–∏–Ω–∞'} –∫–ª–∞—Å—Å–∞ ${category.name}`],

  ['date',
    'üî∏ –î–∞—Ç–∞: –Ω–µ —É–∫–∞–∑–∞–Ω–∞',
    value => `üîπ ${date(value)}`],

  ['time',
    'üî∏ –í—Ä–µ–º—è: –Ω–µ —É–∫–∞–∑–∞–Ω–æ',
    (start, {duration}) => `üîπ –í ${start} –Ω–∞ ${duration} ${plural(duration, '—á–∞—Å', '—á–∞—Å–∞', '—á–∞—Å–æ–≤')}`],

  ['phone_number',
    order => `üîπ –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä: +${order.user.phone_number}`,
    value => `üîπ –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä: ${value}`],

  ['payment',
    'üî∏ –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: –Ω–µ –≤—ã–±—Ä–∞–Ω',
    value => `üîπ ${value === 'payme' ? 'Payme' : '–ù–∞–ª–∏—á–Ω—ã–µ'}`],

  ['cost',
    'üî∏ –°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–µ–∑–¥–∫–∏ –Ω–µ –∏–∑–≤–µ—Å—Ç–Ω–∞', value => `üîπ ${cost(value)}`]];

function fields(order) {
  return r.join("\n", r.map(
    ([field, empty, filled]) =>
      order[field]
        ? `${filled(order[field], order)}`
        : `${typeof empty === 'function' 
                  ? empty(order)
                  : empty}`,
    rules));
}

function note(order) {
  return order.note ? `Notes: <i>${order.note}</i>` : ''
}

function status(order) {
  return {
    submitted: ' (–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω)',
    cancelled: ' (–æ—Ç–º–µ–Ω–µ–Ω)',
    accepted: ' (–ø—Ä–∏–Ω—è—Ç)',
    rejected: ' (–æ—Ç–∫–ª–æ–Ω–µ–Ω)',
    timedout: ' (–ø—Ä–æ—Å—Ä–æ—á–µ–Ω)',
    payment_cancelled: ' (–ø–ª–∞—Ç–µ–∂ –æ—Ç–º–µ–Ω–µ–Ω)',
    payment_completed: ' (—É—Å–ø–µ—à–Ω–æ)',
  }[order.status] || ''
}

export default function(order) {
  return `Order <b>‚Ññ${order.id}</b>${status(order)}

${fields(order)}

${note(order)}`
}
