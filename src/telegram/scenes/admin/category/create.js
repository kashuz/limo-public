import r from 'ramda';
import b from 'bluebird';
import {Scene} from 'telegraf-flow';
import db from '../../../../db';
import {format} from '../../../../util/cost';
import outdent from 'outdent';

const scene = new Scene('admin.category.create');

scene.enter(ctx => ctx
  .reply(outdent`
      –ù–∞–∑–≤–∞–Ω–∏–µ: <b>${ctx.flow.state.category.name}</b>
      –ü–æ–∑–∏—Ü–∏—è: <b>${ctx.flow.state.category.position}</b>
      –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: <b>${format(ctx.flow.state.category.min_price)}</b>
      1 –¥–Ω–µ–≤–Ω–æ–π —á–∞—Å: <b>${format(ctx.flow.state.category.day_hour_price)}</b>
      1 –Ω–æ—á–Ω–æ–π —á–∞—Å: <b>${format(ctx.flow.state.category.night_hour_price)}</b>
      5 —á–∞—Å–æ–≤: <b>${format(ctx.flow.state.category.five_hours_price)}</b>
      12 —á–∞—Å–æ–≤: <b>${format(ctx.flow.state.category.twelve_hours_price)}</b>`, {
    parse_mode: 'html',
    reply_markup: {
      inline_keyboard: [[
        {text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'no'},
        {text: 'üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å', callback_data: 'yes'}]]}}));

scene.action('yes', ctx => db('category')
  .insert(ctx.flow.state.category)
  .returning('id')
  .then(r.head)
  .then(category => b.all([
    ctx.deleteMessage(),
    ctx.flow.enter('admin.category.view', {category})])));

scene.action('no', ctx => b.all([
  ctx.deleteMessage(),
  ctx.flow.enter('admin.category.index')]));

export default scene;
